/** Function to send Email*/
def sendEmail(emailSubject, emailBody, recipients, hasAttachment) {
    print '...........................Sending Email..................................'    
    if(hasAttachment){
        emailext (subject: emailSubject, attachmentsPattern: '**/*.diff',  mimeType: 'text/html', body: emailBody, to: recipients);
    } else {
        emailext (subject: emailSubject, mimeType: 'text/html', body: emailBody, to: recipients);
    }
}

node {

      stage("checkout") {
        git url: 'https://github.com/nrBaskar/dockeransiblejenkins.git'
      }
stage("last-changes") {
def publisher = LastChanges.getLastChangesPublisher "PREVIOUS_REVISION", "SIDE", "LINE", true, true, "", "", "", "", ""
publisher.publishLastChanges()
def changes = publisher.getLastChanges()
println(changes.getEscapedDiff())
	script{
		for (commit in changes.getCommits()) {
			for(cmt in commit){
				println(">>>"+cmt);
			}
			env.GIT_COMMIT_AUTHOR = sh(returnStdout: true, script: 'git log --format="%ae" | head -1').trim()
			env.GIT_COMMIT_ID = sh(returnStdout: true, script: 'git log --pretty=format:"%h" --no-patch | head -1').trim()
			env.GIT_COMMIT_DATE = sh(returnStdout: true, script: 'git log --graph --pretty=format:"%cd" | head -1').trim()
		}
		def diff = publisher.getDiff()
        writeFile file: 'build.diff', text: diff    
        return commitDetails;
	}
     
}

/** config*/
def TESTERS = "${env.TEST_USER}"
def JOB_NAME = "${env.JOB_NAME}"
def Commit_Id = "${env.commit_Id}"

    /** Pipeline steps begin **/

      try{
	  		stage('Notify All') {
			sh label: '', script: '''
            cd /var/lib/jenkins/workspace/$JOB_NAME '''
			sh label: '', script: '''
                        echo "========Getting second last commit=========="
                       	env.GIT_COMMIT_ID = sh(returnStdout: true, script: 'git log --pretty=format:"%h" --no-patch | head -1').trim() > revision.txt
                        '''
                    env.WORKSPACE = pwd()
                    def SPECIFIC_REVISION_ID = readFile "${env.WORKSPACE}/revision.txt"
            def emailSubject = "Jenkins Notification: Trigger for Docker Ansible Build ID #${BUILD_NUMBER}";
                    def emailBody = """
                        <p>Hi Devops Team,</p>
                        <p>Jenkins File Deployment Process for mail_notification is Success : 
                        <p>Please find the last commit details below:</p>
                        <p>See attached diff of <b>${env.JOB_NAME} #${BUILD_NUMBER}</b>.</p>
				  	<p>Commit Id: <b>${env.GIT_COMMIT_ID}</p>
					<p>Author: ${env.GIT_COMMIT_AUTHOR}</p>
					<p>Date: ${env.GIT_COMMIT_DATE}</p>
                    <p>With Regards,</p>
                    <p>Sify Jenkins Admin</p>"""
                    def recipients = TESTERS
                    sendEmail(emailSubject, emailBody, recipients, true);
			   }
			}							
		catch(err) {
                        print "========Sending failure email ===================="                      
                        def emailSubject = "Jenkins Notification: Mail Notification for Build ID #${BUILD_NUMBER} has failed"
                        def emailBody = """
                        <p>Hi Testing Team,</p>
                        <p>Your last deployment failed due to error: ${err}</p>
                        <p>With Regards,</p>
                        <p>Sify Jenkins</p>
                        """
                        def recipients = TESTERS
                        sendEmail(emailSubject, emailBody, recipients, false);
					}			
